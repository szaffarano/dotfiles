#!/usr/bin/env bash


read -r -d '' USAGE << EOM
$(basename "$0") creates a patch based on a list of files that have changed and 
modules where search this files.

Usage:
    $0 <modules> <commits> <dest>

Where <modules> is a file with the list of modules and <files> the list of java 
files to include in the patch file. Finally, <dest> is a directory where will be 
the files to create the patch.

EOM
export USAGE


BASE=$( cd "$(dirname "$0")" || exit; pwd )

# shellcheck source=/dev/null
source "$BASE/common.sh"

checkParamsAtLeast $# 2

commits=( "${@:2}" )

output=$(realpath "$1")

modules=$(mktemp)
files=$(mktemp)
pivot=$(mktemp -d)

trap '{ rm "$modules";   }' EXIT
trap '{ rm "$files";     }' EXIT
trap '{ rm -rf "$pivot"; }' EXIT

git show --format="" --name-only "${commits[@]}" \
    | grep -v test \
    | sed -E -e s'/^(.*)\/src\/main.*$/\1/g' \
    | sort -u > "$modules"

git show --format="" --name-only "${commits[@]}" \
    | grep -v test \
    | sed -E -e s'/^.*\/src\/main\/java\/(.*)\.java$/\1/g' \
    | sort -u > "$files"


while read -r m; do
    if ! [[ -d "$m" ]]; then
        continue
    fi

    echo "collecting files in $m ..."

    cd "$m/target/classes" || die "$m/target/classes not found" 3

    while read -r f; do
        d=$(dirname "$f")
        p=$(basename "$f")
        mkdir -p "$pivot/$d"
        [[ -d "$d" ]] && find "$d" -name "$p.class" -exec cp {} "$pivot/$d" \;
        [[ -d "$d" ]] && find "$d" -name "$p\$*.class" -exec cp {} "$pivot/$d" \;
    done < "$files"

    cd - || exit
done < "$modules"

pushd "$pivot" || die "Error entering into pivot directory"

jar cvf "$output" .

popd || die "Error returning back to WD"
