[Commands]
1\Automatic=true
1\Command="copyq:\n\nif ( ! isClipboard() ) {\n\tfail();\n}\n\nvar title = str( data( \"application/x-copyq-owner-window-title\" ) );\n\nif ( title.search( /KeePassXC$/ ) == -1 ) {\n\tfail();\n}\n\nignore();"
1\Icon=\xf21b
1\Input=text/plain
1\Name=KeePassXC protector v1.0.1 (@ventormo)
10\Command=copyq: toggle()
10\GlobalShortcut=ctrl+alt+v
10\Icon=\xf022
10\IsGlobalShortcut=true
10\Name=Show/hide main window
11\Command=copyq: menu()
11\GlobalShortcut=ctrl+alt+x
11\Icon=\xf01c
11\IsGlobalShortcut=true
11\Name=Show the tray menu
2\Automatic=true
2\Command="copyq:\n// Imports raw commands code (starting with [Command] or [Commands])\n// or from a link ('https://github.com/**/copyq-commands/blob/**.ini').\nvar timeOutSeconds = 10\nvar rawDataUrlPrefix = 'https://raw.githubusercontent.com'\n\n// Don't run this when mouse selection changes.\nif ( dataFormats().indexOf(mimeClipboardMode) != -1 )\n  abort()\n\nfunction importCommandsFromUrl(url)\n{\n  var m = url.match(/^https?:\\/\\/github\\.com(\\/.*)\\/blob(\\/.*\\.ini)/)\n  if (!m)\n    return;\n\n  var rawDataUrl = rawDataUrlPrefix + m[1] + m[2]\n  var reply = networkGet(rawDataUrl)\n  var commandsData = str(reply.data)\n  if (reply.status != 200) {\n    throw 'Failed to fetch commands.'\n        + '\\nStatus code: ' + reply.status\n        + '\\nError: ' + reply.error\n  }\n  if ( !commandsData.match(/^\\[Commands?\\]/) )\n    return;\n\n  return importCommands(commandsData);\n}\n\nvar cmds = importCommandsFromUrl(str(input())) || importCommands(input())\n\nvar list = '<ul>'\nfor (var i in cmds) {\n  var cmd = cmds[i]\n  var cmdType =\n    cmd.automatic ? 'automatic' :\n    cmd.inMenu ? 'menu/shortcut' :\n    cmd.globalShortcuts ? 'global shortcut' : '<b>???</b>';\n  list += '<li>' + escapeHtml(cmds[i].name) + ' (' + cmdType + ')</li>'\n}\nlist += '</ul>'\n\nvar message = '<p><b>Import commands</b> from clipboard?</p>' + list\nnotification(\n  '.title', 'Commands Available',\n  '.message', message,\n  '.time', timeOutSeconds*1000,\n  '.icon', '\xf085',\n  '.id', 'CopyQ_commands_in_clipboard',\n  '.button', 'Cancel', '', '',\n  '.button', 'Import', 'copyq: addCommands( importCommands(input()) )', exportCommands(cmds)\n)"
2\Icon=\xf085
2\Input=text/plain
2\Match=^\\[Commands?\\]|https?://github\\.com/.*/copyq-commands/blob/.*\\.ini
2\Name=Notification for Copied Commands
3\Command=copyq: plugins.itempinned.pin()
3\Icon=\xf08d
3\InMenu=true
3\Input=!OUTPUT
3\Name=Pin
3\Output=application/x-copyq-item-pinned
4\Command=copyq: plugins.itempinned.unpin()
4\Icon=\xf08d
4\InMenu=true
4\Input=application/x-copyq-item-pinned
4\Name=Unpin
5\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
5\Icon=\xf02b
5\InMenu=true
5\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
5\Name=Tag as \x201cImportant\x201d
6\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
6\Icon=\xf02b
6\InMenu=true
6\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
6\Name=Remove tag \x201cImportant\x201d
7\Command=copyq: plugins.itemtags.tag()
7\Icon=\xf02b
7\InMenu=true
7\Name=Add a Tag
8\Command=copyq: plugins.itemtags.untag()
8\Icon=\xf02b
8\InMenu=true
8\Input=application/x-copyq-tags
8\Name=Remove a Tag
9\Command=copyq: plugins.itemtags.clearTags()
9\Icon=\xf02b
9\InMenu=true
9\Input=application/x-copyq-tags
9\Name=Clear all tags
size=11
