[Commands]
1\Automatic=true
1\Command="copyq:\n// Imports raw commands code (starting with [Command] or [Commands])\n// or from a link ('https://github.com/**/copyq-commands/blob/**.ini').\nvar timeOutSeconds = 10\nvar rawDataUrlPrefix = 'https://raw.githubusercontent.com'\n\n// Don't run this when mouse selection changes.\nif ( dataFormats().indexOf(mimeClipboardMode) != -1 )\n  abort()\n\nfunction importCommandsFromUrl(url)\n{\n  var m = url.match(/^https?:\\/\\/github\\.com(\\/.*)\\/blob(\\/.*\\.ini)/)\n  if (!m)\n    return;\n\n  var rawDataUrl = rawDataUrlPrefix + m[1] + m[2]\n  var reply = networkGet(rawDataUrl)\n  var commandsData = str(reply.data)\n  if (reply.status != 200) {\n    throw 'Failed to fetch commands.'\n        + '\\nStatus code: ' + reply.status\n        + '\\nError: ' + reply.error\n  }\n  if ( !commandsData.match(/^\\[Commands?\\]/) )\n    return;\n\n  return importCommands(commandsData);\n}\n\nvar cmds = importCommandsFromUrl(str(input())) || importCommands(input())\n\nvar list = '<ul>'\nfor (var i in cmds) {\n  var cmd = cmds[i]\n  var cmdType =\n    cmd.automatic ? 'automatic' :\n    cmd.inMenu ? 'menu/shortcut' :\n    cmd.globalShortcuts ? 'global shortcut' : '<b>???</b>';\n  list += '<li>' + escapeHtml(cmds[i].name) + ' (' + cmdType + ')</li>'\n}\nlist += '</ul>'\n\nvar message = '<p><b>Import commands</b> from clipboard?</p>' + list\nnotification(\n  '.title', 'Commands Available',\n  '.message', message,\n  '.time', timeOutSeconds*1000,\n  '.icon', '\xf085',\n  '.id', 'CopyQ_commands_in_clipboard',\n  '.button', 'Cancel', '', '',\n  '.button', 'Import', 'copyq: addCommands( importCommands(input()) )', exportCommands(cmds)\n)"
1\Icon=\xf085
1\Input=text/plain
1\Match=^\\[Commands?\\]|https?://github\\.com/.*/copyq-commands/blob/.*\\.ini
1\Name=Notification for Copied Commands
10\Command=copyq: plugins.itemtags.clearTags()
10\Icon=\xf02b
10\InMenu=true
10\Input=application/x-copyq-tags
10\Name=Clear all tags
11\Command=copyq: toggle()
11\GlobalShortcut=ctrl+alt+v
11\Icon=\xf022
11\IsGlobalShortcut=true
11\Name=Show/hide main window
12\Command=copyq: menu()
12\GlobalShortcut=ctrl+alt+x
12\Icon=\xf01c
12\IsGlobalShortcut=true
12\Name=Show the tray menu
2\Automatic=true
2\Command=copyq ignore
2\Icon=\xf069
2\Name=Ignore *\"Password\"* window
2\Remove=true
2\Window=Password
3\Automatic=true
3\Command="copyq:\nif (!isClipboard()) {\n    fail();\n}\n\nvar title = str(data(mimeWindowTitle));\n\nif (title.search(/KeePassXC$|Generate Password/) == -1) {\n    fail();\n}\n\nignore();"
3\Icon=\xf21b
3\Input=text/plain
3\Name=KeePassXC protector v2
4\Command=copyq: plugins.itempinned.pin()
4\Icon=\xf08d
4\InMenu=true
4\Input=!OUTPUT
4\Name=Pin
4\Output=application/x-copyq-item-pinned
5\Command=copyq: plugins.itempinned.unpin()
5\Icon=\xf08d
5\InMenu=true
5\Input=application/x-copyq-item-pinned
5\Name=Unpin
6\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
6\Icon=\xf02b
6\InMenu=true
6\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
6\Name=Tag as \x201cImportant\x201d
7\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
7\Icon=\xf02b
7\InMenu=true
7\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
7\Name=Remove tag \x201cImportant\x201d
8\Command=copyq: plugins.itemtags.tag()
8\Icon=\xf02b
8\InMenu=true
8\Name=Add a Tag
9\Command=copyq: plugins.itemtags.untag()
9\Icon=\xf02b
9\InMenu=true
9\Input=application/x-copyq-tags
9\Name=Remove a Tag
size=12
